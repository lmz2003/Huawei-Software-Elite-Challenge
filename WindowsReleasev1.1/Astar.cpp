#include <iostream>
#include <vector>
#include <set>
#include <cmath>
#include <algorithm>

using namespace std;

// A*算法
vector<pair<int, int>> aStar(char ch[][30], pair<int, int> start, pair<int, int> end) {
    int dx[4] = {1, -1, 0, 0};
    int dy[4] = {0, 0, 1, -1};

    set<pair<int, pair<int, int>>> openSet;
    vector<vector<bool>> closedSet(30, vector<bool>(30, false));
    vector<vector<pair<int, int>>> cameFrom(30, vector<pair<int, int>>(30, {-1, -1}));

    openSet.insert({0, {start.first, start.second}});

    while (!openSet.empty()) {
        auto current = *openSet.begin();
        openSet.erase(openSet.begin());

        int x = current.second.first;
        int y = current.second.second;

        if (x == end.first && y == end.second) {
            vector<pair<int, int>> path;
            while (x != start.first || y != start.second) {
                path.push_back({x, y});
                auto prev = cameFrom[x][y];
                x = prev.first;
                y = prev.second;
            }
            path.push_back({start.first, start.second});
            reverse(path.begin(), path.end());
            return path;
        }

        closedSet[x][y] = true;

        for (int i = 0; i < 4; ++i) {
            int newX = x + dx[i];
            int newY = y + dy[i];

            if (newX < 0 || newX >= 30 || newY < 0 || newY >= 30 || ch[newX][newY] == '#' || ch[newX][newY] == '*') {
                continue;
            }

            int newG = current.first + 1;
            int newH = abs(end.first - newX) + abs(end.second - newY);
            int newF = newG + newH;

            if (closedSet[newX][newY]) {
                continue;
            }

            bool inOpenSet = false;
            for (auto node : openSet) {
                if (node.second.first == newX && node.second.second == newY) {
                    inOpenSet = true;
                    if (newF < node.first) {
                        openSet.erase(node);
                        openSet.insert({newF, {newX, newY}});
                        cameFrom[newX][newY] = {x, y};
                    }
                    break;
                }
            }

            if (!inOpenSet) {
                openSet.insert({newF, {newX, newY}});
                cameFrom[newX][newY] = {x, y};
            }
        }
    }

    return {};
}

int main() {
    char ch[30][30] = {
        {'.', '.', '.', '.', '#','.', '.', '.', '.', '#','.', '.', '.', '.', '#','.', '.', '.', '.', '#','.', '.', '.', '.', '#','.', '.', '.', '.', '#'},
        {'#', '#', '*', '.', '#','.', '.', '.', '.', '#','.', '.', '.', '.', '#','.', '.', '.', '.', '#','.', '.', '.', '.', '#','.', '.', '.', '.', '#'},
        {'.', '.', '.', '.', '.','#', '#', '*', '.', '.','.', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','.', '.', '.', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '.', '.', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '.', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '.', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '.', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','.', '.', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '.', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '.', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '.', '.', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '#', '#', '#', '#','#', '#', '*', '.', '.','#', '#', '*', '.', '.','#', '.', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'},
        {'.', '.', '.', '.', '.','.', '.', '.', '.', '.','#', '#', '*', '.', '.','.', '.', '*', '.', '.','#', '#', '*', '.', '.','#', '#', '*', '.', '.'}
    };

    pair<int, int> start = {0, 0};
    pair<int, int> end = {29, 29};

    vector<pair<int, int>> path = aStar(ch, start, end);

    if (!path.empty()) {
        cout << "Path found:" << endl;
        for (auto p : path) {
            cout << "(" << p.first << ", " << p.second << ")" << endl;
        }
    } else {
        cout << "Path not found!" << endl;
    }

    return 0;
}
